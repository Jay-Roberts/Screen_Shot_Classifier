import tensorflow as tf
import numpy as np

graph_path = '/home/jay/Dropbox/gClass/estimator/output_20180117_155055/model.ckpt-10.meta'
graph = tf.Graph()
with tf.Session(graph=graph) as sess:
    # Load the graph with the trained states
    loader = tf.import_graph_def('/home/jay/Dropbox/gClass/estimator/output_20180117_155055/Saved_Estimators/saved_model.pb')
    #loader.restore(sess, '/home/jay/Dropbox/gClass/estimator/output_20180117_155055/model.ckpt-10')

    print('Loaded')

    input = graph.get_operation_by_name("input_layer").outputs[0]
    prediction=graph.get_operation_by_name("softmax_tensor").outputs[0]
    classes = graph.get_tensor_by_name("class:0").outputs[0]
    
    print(input,prediction)
    newdata= np.zeros((28,28,3))
    print sess.run([prediction,classes],feed_dict={input:[newdata]})
"""
import tensorflow as tf
import numpy as np

graph_path = '/home/jay/Dropbox/gClass/estimator/output_20180117_155055/model.ckpt-10.meta'
graph = tf.Graph()
with tf.Session(graph=graph) as sess:
    # Load the graph with the trained states
    loader = tf.train.import_meta_graph('/home/jay/Dropbox/gClass/estimator/output_20180117_155055/model.ckpt-10.meta')
    loader.restore(sess, '/home/jay/Dropbox/gClass/estimator/output_20180117_155055/model.ckpt-10')

    print('Loaded')

    input = graph.get_operation_by_name("input_layer").outputs[0]
    prediction=graph.get_operation_by_name("softmax_tensor").outputs[0]
    classes = graph.get_tensor_by_name("class:0").outputs[0]
    
    print(input,prediction)
    newdata= np.zeros((28,28,3))
    print sess.run([prediction,classes],feed_dict={input:[newdata]})
"""